name: Download minio/mc
description: Download minio/mc binaries and cache them for the day

runs:
  using: composite
  steps:
    - name: minio cache key
      id: minio-cache-key
      shell: bash
      run: |
        set -eux
        ARCH="$(dpkg --print-architecture)"
        DATE="$(date --utc '+%Y%m%d')"

        # To download the binaries for the right arch.
        echo "ARCH=${ARCH}" >> $GITHUB_OUTPUT

        # i.e: minio-amd64-${DATE}
        echo "KEY=minio-${ARCH}-${DATE}" >> $GITHUB_OUTPUT

    # GitHub will remove any cache entries that have not been accessed in over 7 days.
    # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/caching-dependencies-to-speed-up-workflows#usage-limits-and-eviction-policy
    - name: Cache minio/mc binaries
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      id: cache-minio
      with:
        path: |
          /home/runner/go/bin/minio
          /home/runner/go/bin/mc
        key: ${{ steps.minio-cache-key.outputs.KEY }}

    - name: Download minio/mc
      if: ${{ steps.cache-minio.outputs.cache-hit != 'true' }}
      env:
        ARCH: ${{ steps.minio-cache-key.outputs.ARCH }}
      shell: bash
      run: |
        set -eux

        DIR="/home/runner/go/bin"
        mkdir -p "${DIR}"
        # Download minio ready to include in dependencies for system tests.
        curl -sSfL "https://dl.min.io/server/minio/release/linux-${ARCH}/minio" --output "${DIR}/minio"
        chmod +x "${DIR}/minio"

        # Also grab the latest minio client to maintain compatibility with the server.
        curl -sSfL "https://dl.min.io/client/mc/release/linux-${ARCH}/mc" --output "${DIR}/mc"
        chmod +x "${DIR}/mc"
